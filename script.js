document.addEventListener('DOMContentLoaded', () => {
    // --- Data Definitions (–û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ, —Å –∞—Ä—Ç–∏–∫–ª—è–º–∏ —É —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö) ---
    const pronouns = [
        // –î–æ–±–∞–≤–ª—è–µ–º gr_acc_weak: ŒºŒµ, œÉŒµ, œÑŒøŒΩ, œÑŒ∑ŒΩ, œÑŒø, ŒºŒ±œÇ, œÉŒ±œÇ, œÑŒøœÖœÇ, œÑŒπœÇ, œÑŒ±
        // –î–æ–±–∞–≤–ª—è–µ–º ru_acc: –º–µ–Ω—è, —Ç–µ–±—è, –µ–≥–æ, –µ—ë, –µ–≥–æ, –Ω–∞—Å, –≤–∞—Å, –∏—Ö, –∏—Ö, –∏—Ö
        { person: 1, number: 'sg', gr: 'ŒµŒ≥œé', ru: '—è', gr_gen: 'ŒºŒøœÖ', ru_dat: '–º–Ω–µ', gr_acc_weak: 'ŒºŒµ', ru_acc: '–º–µ–Ω—è' },
        { person: 2, number: 'sg', gr: 'ŒµœÉœç', ru: '—Ç—ã', gr_gen: 'œÉŒøœÖ', ru_dat: '—Ç–µ–±–µ', gr_acc_weak: 'œÉŒµ', ru_acc: '—Ç–µ–±—è' },
        // –î–ª—è 3 –ª–∏—Ü–∞ –µ–¥.—á. –≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–æ–¥–∞ –°–õ–ï–î–£–Æ–©–ï–ì–û —Å–ª–æ–≤–∞, –Ω–æ –¥–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –±–µ—Ä–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–æ—Ä–º—ã œÑŒøŒΩ, œÑŒ∑ŒΩ, œÑŒø
        { person: 3, number: 'sg', gr: 'Œ±œÖœÑœåœÇ', ru: '–æ–Ω', gr_gen: 'œÑŒøœÖ', ru_dat: '–µ–º—É', gr_acc_weak: 'œÑŒøŒΩ', ru_acc: '–µ–≥–æ' },
        { person: 3, number: 'sg', gr: 'Œ±œÖœÑŒÆ', ru: '–æ–Ω–∞', gr_gen: 'œÑŒ∑œÇ', ru_dat: '–µ–π', gr_acc_weak: 'œÑŒ∑ŒΩ', ru_acc: '–µ—ë' },
        { person: 3, number: 'sg', gr: 'Œ±œÖœÑœå', ru: '–æ–Ω–æ', gr_gen: 'œÑŒøœÖ', ru_dat: '–µ–º—É', gr_acc_weak: 'œÑŒø', ru_acc: '–µ–≥–æ (—Å—Ä)' }, // '–æ–Ω–æ' –≤ —Ä—É—Å. –≤–∏–Ω. –ø–∞–¥–µ–∂–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–æ–¥. '–µ–≥–æ'
        { person: 1, number: 'pl', gr: 'ŒµŒºŒµŒØœÇ', ru: '–º—ã', gr_gen: 'ŒºŒ±œÇ', ru_dat: '–Ω–∞–º', gr_acc_weak: 'ŒºŒ±œÇ', ru_acc: '–Ω–∞—Å' },
        { person: 2, number: 'pl', gr: 'ŒµœÉŒµŒØœÇ', ru: '–≤—ã', gr_gen: 'œÉŒ±œÇ', ru_dat: '–≤–∞–º', gr_acc_weak: 'œÉŒ±œÇ', ru_acc: '–≤–∞—Å' },
        { person: 3, number: 'pl', gr: 'Œ±œÖœÑŒøŒØ', ru: '–æ–Ω–∏ (–º)', gr_gen: 'œÑŒøœÖœÇ', ru_dat: '–∏–º', gr_acc_weak: 'œÑŒøœÖœÇ', ru_acc: '–∏—Ö (–º)' },
        { person: 3, number: 'pl', gr: 'Œ±œÖœÑŒ≠œÇ', ru: '–æ–Ω–∏ (–∂)', gr_gen: 'œÑŒøœÖœÇ', ru_dat: '–∏–º', gr_acc_weak: 'œÑŒπœÇ', ru_acc: '–∏—Ö (–∂)' },
        { person: 3, number: 'pl', gr: 'Œ±œÖœÑŒ¨', ru: '–æ–Ω–∏ (—Å—Ä)', gr_gen: 'œÑŒøœÖœÇ', ru_dat: '–∏–º', gr_acc_weak: 'œÑŒ±', ru_acc: '–∏—Ö (—Å—Ä)' },
    ];

    const nouns = [
        { id: 'man', gr_sg: 'Œ¨ŒΩŒ¥œÅŒ±œÇ', gr_pl: 'Œ¨ŒΩŒ¥œÅŒµœÇ', ru_sg: '–º—É–∂—á–∏–Ω–∞', ru_pl: '–º—É–∂—á–∏–Ω—ã', gr_sg_art: 'Œø Œ¨ŒΩŒ¥œÅŒ±œÇ', gr_pl_art: 'ŒøŒπ Œ¨ŒΩŒ¥œÅŒµœÇ'},
        { id: 'woman', gr_sg: 'Œ≥œÖŒΩŒ±ŒØŒ∫Œ±', gr_pl: 'Œ≥œÖŒΩŒ±ŒØŒ∫ŒµœÇ', ru_sg: '–∂–µ–Ω—â–∏–Ω–∞', ru_pl: '–∂–µ–Ω—â–∏–Ω—ã', gr_sg_art: 'Œ∑ Œ≥œÖŒΩŒ±ŒØŒ∫Œ±', gr_pl_art: 'ŒøŒπ Œ≥œÖŒΩŒ±ŒØŒ∫ŒµœÇ'},
        { id: 'child', gr_sg: 'œÄŒ±ŒπŒ¥ŒØ', gr_pl: 'œÄŒ±ŒπŒ¥ŒπŒ¨', ru_sg: '—Ä–µ–±—ë–Ω–æ–∫', ru_pl: '–¥–µ—Ç–∏', gr_sg_art: 'œÑŒø œÄŒ±ŒπŒ¥ŒØ', gr_pl_art: 'œÑŒ± œÄŒ±ŒπŒ¥ŒπŒ¨'}
    ];

    const verbs = [
        {
            id: 'einai',
            gr_inf: 'ŒµŒØŒºŒ±Œπ',
            ru_inf: '–±—ã—Ç—å/—è–≤–ª—è—Ç—å—Å—è',
            conjugations: { // –ì—Ä–µ—á–µ—Å–∫–∏–µ —Å–ø—Ä—è–∂–µ–Ω–∏—è
                '1sg': 'ŒµŒØŒºŒ±Œπ', '2sg': 'ŒµŒØœÉŒ±Œπ', '3sg': 'ŒµŒØŒΩŒ±Œπ',
                '1pl': 'ŒµŒØŒºŒ±œÉœÑŒµ', '2pl': 'ŒµŒØœÉœÑŒµ', '3pl': 'ŒµŒØŒΩŒ±Œπ'
            },
            ru_conjugations: { // –†—É—Å—Å–∫–∏–µ —Å–ø—Ä—è–∂–µ–Ω–∏—è (–¥–ª—è —Ä–µ–∂–∏–º–æ–≤ 'verbs' –∏ 'phrases')
                '1sg': '—è–≤–ª—è—é—Å—å', '2sg': '—è–≤–ª—è–µ—à—å—Å—è', '3sg': '—è–≤–ª—è–µ—Ç—Å—è',
                '1pl': '—è–≤–ª—è–µ–º—Å—è', '2pl': '—è–≤–ª—è–µ—Ç–µ—Å—å', '3pl': '—è–≤–ª—è—é—Ç—Å—è'
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º "—è–≤–ª—è—Ç—å—Å—è", —Ç.–∫. "–±—ã—Ç—å" –≤ –Ω–∞—Å—Ç–æ—è—â–µ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–±—ã—á–Ω–æ –æ–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–ª–∏ –∞—Ä—Ö–∞–∏—á–Ω–æ.
            },
            // –ì–ï–ù–ï–†–ê–¢–û–† –§–†–ê–ó –î–õ–Ø –†–ï–ñ–ò–ú–ê "–§–†–ê–ó–´"
            generatePhraseModePhrase: (pronoun, nounData) => {
                // –õ–æ–≥–∏–∫–∞ –¥–ª—è 'einai' –≤ —Ä–µ–∂–∏–º–µ —Ñ—Ä–∞–∑ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
                const usePlural = pronoun.number === 'pl';
                const noun_gr = usePlural ? nounData.gr_pl : nounData.gr_sg;
                const noun_ru = usePlural ? nounData.ru_pl : nounData.ru_sg;
                const personNumber = `${pronoun.person}${pronoun.number}`;

                // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≥–ª–∞–≥–æ–ª–∞ 'einai' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø—Ä—è–∂–µ–Ω–∏—è–º
                 const einaiVerbData = verbs.find(v => v.id === 'einai');
                 if (!einaiVerbData) return null; // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

                const verbFormGr = einaiVerbData.conjugations[personNumber];
                // –î–ª—è —Ä—É—Å—Å–∫–æ–π —Ñ—Ä–∞–∑—ã "–Ø - –º—É–∂—á–∏–Ω–∞" –≥–ª–∞–≥–æ–ª '—è–≤–ª—è—é—Å—å' –æ–ø—É—Å–∫–∞–µ—Ç—Å—è
                let subj_ru = pronoun.ru;
                if (pronoun.number === 'pl' && pronoun.person === 3) subj_ru = '–æ–Ω–∏';

                const gr_phrase = `${verbFormGr} ${noun_gr}`; // –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ –æ–ø—É—â–µ–Ω–æ
                const ru_phrase = `${subj_ru} - ${noun_ru}`; // –ì–ª–∞–≥–æ–ª –æ–ø—É—â–µ–Ω

                return { greek: gr_phrase, russian: ru_phrase };
            }
        },
        {
            id: 'areso',
            gr_inf: 'Œ±œÅŒ≠œÉœâ',
            ru_inf: '–Ω—Ä–∞–≤–∏—Ç—å—Å—è',
            conjugations: { // –ì—Ä–µ—á–µ—Å–∫–∏–µ —Å–ø—Ä—è–∂–µ–Ω–∏—è (–∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–æ–≥–æ, *—á—Ç–æ* –Ω—Ä–∞–≤–∏—Ç—Å—è)
                '1sg': 'Œ±œÅŒ≠œÉœâ', '2sg': 'Œ±œÅŒ≠œÉŒµŒπœÇ', '3sg': 'Œ±œÅŒ≠œÉŒµŒπ',
                '1pl': 'Œ±œÅŒ≠œÉŒøœÖŒºŒµ', '2pl': 'Œ±œÅŒ≠œÉŒµœÑŒµ', '3pl': 'Œ±œÅŒ≠œÉŒøœÖŒΩ'
            },
            ru_conjugations: { // –†—É—Å—Å–∫–∏–µ —Å–ø—Ä—è–∂–µ–Ω–∏—è (–∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–æ–≥–æ, *—á—Ç–æ* –Ω—Ä–∞–≤–∏—Ç—Å—è)
                '1sg': '–Ω—Ä–∞–≤–ª—é—Å—å', '2sg': '–Ω—Ä–∞–≤–∏—à—å—Å—è', '3sg': '–Ω—Ä–∞–≤–∏—Ç—Å—è',
                '1pl': '–Ω—Ä–∞–≤–∏–º—Å—è', '2pl': '–Ω—Ä–∞–≤–∏—Ç–µ—Å—å', '3pl': '–Ω—Ä–∞–≤—è—Ç—Å—è'
            },
            // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –§–†–ê–ó –î–õ–Ø –†–ï–ñ–ò–ú–ê "–§–†–ê–ó–´"
            generatePhraseModePhrase: (likerPronoun, availableNouns) => {
                 const aresoVerbData = verbs.find(v => v.id === 'areso');
                 if (!aresoVerbData) return null; // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

                 const usePronounObject = Math.random() < 0.5; // 50% —à–∞–Ω—Å, —á—Ç–æ –æ–±—ä–µ–∫—Ç - –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ

                 if (usePronounObject) {
                     // --- –í–∞—Ä–∏–∞–Ω—Ç: –û–±—ä–µ–∫—Ç - –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ ("–¢—ã –º–Ω–µ –Ω—Ä–∞–≤–∏—à—å—Å—è") ---
                     let likedPronoun;
                     do {
                         likedPronoun = getRandomElement(pronouns);
                     } while (likerPronoun === likedPronoun); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è

                     const personNumberLiked = `${likedPronoun.person}${likedPronoun.number}`;

                     // –ì—Ä–µ—á–µ—Å–∫–∏–π –≥–ª–∞–≥–æ–ª –∑–∞–≤–∏—Å–∏—Ç –æ—Ç likedPronoun
                     const verbFormGr = aresoVerbData.conjugations[personNumberLiked];
                     // –†—É—Å—Å–∫–∏–π –≥–ª–∞–≥–æ–ª –∑–∞–≤–∏—Å–∏—Ç –æ—Ç likedPronoun
                     const verbFormRu = aresoVerbData.ru_conjugations[personNumberLiked];

                     if (!verbFormGr || !verbFormRu) {
                         console.error(`Missing conjugation for areso, personNumber: ${personNumberLiked}`);
                         return null; // –ù–µ –º–æ–∂–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
                     }

                     // –ì—Ä–µ—á–µ—Å–∫–∏–π: ŒúŒøœÖ Œ±œÅŒ≠œÉŒµŒπœÇ (–¢—ã –º–Ω–µ –Ω—Ä–∞–≤–∏—à—å—Å—è)
                     const gr_phrase = `${likerPronoun.gr_gen} ${verbFormGr}`;
                     // –†—É—Å—Å–∫–∏–π: –¢—ã –Ω—Ä–∞–≤–∏—à—å—Å—è –º–Ω–µ
                     const ru_phrase = `${likedPronoun.ru} ${verbFormRu} ${likerPronoun.ru_dat}`;

                     return { greek: gr_phrase, russian: ru_phrase };

                 } else {
                      // --- –í–∞—Ä–∏–∞–Ω—Ç: –û–±—ä–µ–∫—Ç - –°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ ("–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∂–µ–Ω—â–∏–Ω–∞") ---
                      if (availableNouns.length === 0) return null; // –ù–µ –º–æ–∂–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö

                      const likedNounData = getRandomElement(availableNouns);
                      const usePlural = Math.random() < 0.5;

                      const likedNoun_gr_art = usePlural ? likedNounData.gr_pl_art : likedNounData.gr_sg_art;
                      const likedNoun_ru = usePlural ? likedNounData.ru_pl : likedNounData.ru_sg;

                      // –ì–ª–∞–≥–æ–ª (–≥—Ä–µ—á/—Ä—É—Å) –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∏—Å–ª–∞ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ (3 –ª–∏—Ü–æ)
                      const verbFormGr = usePlural ? aresoVerbData.conjugations['3pl'] : aresoVerbData.conjugations['3sg'];
                      const verbFormRu = usePlural ? aresoVerbData.ru_conjugations['3pl'] : aresoVerbData.ru_conjugations['3sg'];

                     if (!verbFormGr || !verbFormRu) {
                         console.error(`Missing 3rd person conjugation for areso`);
                         return null; // –ù–µ –º–æ–∂–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
                     }

                      // –ì—Ä–µ—á–µ—Å–∫–∏–π: ŒúŒøœÖ Œ±œÅŒ≠œÉŒµŒπ Œ∑ Œ≥œÖŒΩŒ±ŒØŒ∫Œ±
                      const gr_phrase = `${likerPronoun.gr_gen} ${verbFormGr} ${likedNoun_gr_art}`;
                      // –†—É—Å—Å–∫–∏–π: –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∂–µ–Ω—â–∏–Ω–∞
                      const ru_phrase = `${likerPronoun.ru_dat} ${verbFormRu} ${likedNoun_ru}`;

                      return { greek: gr_phrase, russian: ru_phrase };
                 }
            }
        }
        // Add more verbs here with their ru_conjugations
    ];

    const magicEmojis = ['üß†', '‚ú®', 'ü§î', 'üí°', 'üîÆ', 'üßô', 'ü™Ñ'];

    // --- DOM Elements ---
    const settingsPanel = document.getElementById('settings-panel');
    const trainerDiv = document.getElementById('trainer');
    const trainingModeSelect = document.getElementById('training-mode-select');
    const verbSelectionList = document.querySelector('#verb-selection .scrollable-list');
    const nounSelectionList = document.querySelector('#noun-selection .scrollable-list');
    const languageModeSelect = document.getElementById('language-mode'); // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    const promptTextDiv = document.getElementById('prompt-text');
    const speakPromptButton = document.getElementById('speak-prompt-button');
    const resultDiv = document.getElementById('result');
    const userInput = document.getElementById('user-input');
    const speakAnswerButton = document.getElementById('speak-answer-button');
    const submitButton = document.getElementById('submit-button');
    const nextButton = document.getElementById('next-button');
    const speechStatusP = document.getElementById('speech-status');
    const errorMessageP = document.getElementById('error-message');
    const settingsErrorP = document.getElementById('settings-error');

    // --- State Variables ---
    let currentPhrase = null;
    let selectedVerbIds = [];
    let selectedNounIds = [];
    let currentMode = 'phrases'; // Default mode
    let recognition = null; // For Speech Recognition

    // --- Cookie Functions ---
    function setCookie(name, value, days) {
        let expires = "";
        if (days) {
            const date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toUTCString();
        }
        // Encode value to handle special characters like commas in arrays
        document.cookie = name + "=" + (encodeURIComponent(value) || "") + expires + "; path=/; SameSite=Lax";
         // console.log("Set cookie:", name, "=", value);
    }

    function getCookie(name) {
        const nameEQ = name + "=";
        const ca = document.cookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) == 0) {
                const value = decodeURIComponent(c.substring(nameEQ.length, c.length));
                // console.log("Get cookie:", name, "=", value);
                return value;
            }
        }
        return null;
    }

    // --- Web Speech API (unchanged from previous version) ---
    const synth = window.speechSynthesis;
    let voices = [];
    function populateVoiceList() { /* ... same as before ... */
         if(typeof synth === 'undefined') return; voices = synth.getVoices();
    }
    populateVoiceList();
    if (speechSynthesis.onvoiceschanged !== undefined) {
        speechSynthesis.onvoiceschanged = populateVoiceList;
    }
    function speakText(text, lang) { /* ... same as before ... */
         if (synth.speaking) { synth.cancel(); /* Cancel previous before speaking new */ }
         if (text && typeof SpeechSynthesisUtterance !== 'undefined') {
            const utterThis = new SpeechSynthesisUtterance(text);
            utterThis.onerror = (event) => { console.error('SpeechSynthesisUtterance.onerror', event); showError(`–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: ${event.error}`); };
            const targetLang = lang.startsWith('el') ? 'el-GR' : 'ru-RU';
            let selectedVoice = voices.find(voice => voice.lang === targetLang && voice.localService) || voices.find(voice => voice.lang === targetLang);
             if (!selectedVoice) selectedVoice = voices.find(voice => voice.lang.startsWith(lang.substring(0, 2)) && voice.localService) || voices.find(voice => voice.lang.startsWith(lang.substring(0, 2)));
             if (selectedVoice) utterThis.voice = selectedVoice; else utterThis.lang = targetLang;
            utterThis.pitch = 1; utterThis.rate = 0.9;
            synth.speak(utterThis);
        } else if (typeof SpeechSynthesisUtterance === 'undefined'){
             console.warn("Speech Synthesis not supported");
        }
    }
     function setupSpeechRecognition(lang) { /* ... same as before ... */
         window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        if (!window.SpeechRecognition) {
            speakAnswerButton.disabled = true; speakAnswerButton.title = "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"; return null;
        }
         speakAnswerButton.disabled = false; speakAnswerButton.title = "–°–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç";
         const recognizer = new SpeechRecognition();
         recognizer.lang = lang; recognizer.interimResults = false; recognizer.maxAlternatives = 1;
         recognizer.onstart = () => { speechStatusP.textContent = `–ì–æ–≤–æ—Ä–∏—Ç–µ (${lang})...`; speechStatusP.classList.remove('hidden'); speakAnswerButton.disabled = true; };
         recognizer.onresult = (event) => { userInput.value = event.results[0][0].transcript; handleSubmit(); };
         recognizer.onspeechend = () => { recognizer.stop(); };
         recognizer.onerror = (event) => {
             console.error('Speech recognition error', event.error);
             let errorMsg = `–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ${event.error}`;
             if (event.error === 'no-speech') errorMsg = '–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.';
             if (event.error === 'audio-capture') errorMsg = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º.';
             if (event.error === 'not-allowed') errorMsg = '–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω.';
             showError(errorMsg); // Show error in main trainer area
             speechStatusP.classList.add('hidden'); speakAnswerButton.disabled = false;
         };
         recognizer.onend = () => { speechStatusP.classList.add('hidden'); speakAnswerButton.disabled = false; };
         return recognizer;
     }

    // --- Core Functions ---

    function getRandomElement(arr) {
        return arr[Math.floor(Math.random() * arr.length)];
    }

    function normalizeText(text) {
        return text.toLowerCase().trim().replace(/\s+/g, ' ');
    }

    function handleSettingsChange() {
        // Read selected mode from the select dropdown
        currentMode = trainingModeSelect.value;

        // Read selected verbs/nouns (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        selectedVerbIds = Array.from(verbSelectionList.querySelectorAll('input[type="checkbox"]:checked')).map(cb => cb.value);
        selectedNounIds = Array.from(nounSelectionList.querySelectorAll('input[type="checkbox"]:checked')).map(cb => cb.value);

        // Save settings to cookies (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
        setCookie('trainingMode', currentMode, 30);
        setCookie('selectedVerbs', selectedVerbIds.join(','), 30);
        setCookie('selectedNouns', selectedNounIds.join(','), 30);
        setCookie('languageMode', languageModeSelect.value, 30); // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

        // Regenerate phrase based on new settings (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        generateNewPhrase();
    }

    function generateNewPhrase() {
        clearTrainerError(); // Clear errors in the main trainer area
        clearSettingsError(); // Clear errors in the settings panel
        resultDiv.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        userInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        // --- –£–î–ê–õ–ò–¢–¨ –ò–õ–ò –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨ –°–õ–ï–î–£–Æ–©–£–Æ –°–¢–†–û–ö–£ ---
        // nextButton.classList.add('hidden'); // –ë–æ–ª—å—à–µ –Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ" –∑–¥–µ—Å—å
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
        submitButton.disabled = false; // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π —Ñ—Ä–∞–∑—ã
        speakAnswerButton.disabled = recognition === null; // Reset speech button state

        currentPhrase = null; // Reset current phrase
        let phraseGenerated = false; // Flag to check if generation was successful

        const availableVerbs = verbs.filter(v => selectedVerbIds.includes(v.id));
        const availableNouns = nouns.filter(n => selectedNounIds.includes(n.id));

        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏/—Ä–µ—á–∏, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        let disableInputs = false;
        switch (currentMode) {
            case 'nouns':
                if (availableNouns.length === 0) {
                    showSettingsError("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ '–¢–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ'.");
                    disableInputs = true;
                }
                break;
            case 'verbs':
                 if (availableVerbs.length === 0) {
                    showSettingsError("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–ª–∞–≥–æ–ª –¥–ª—è —Ä–µ–∂–∏–º–∞ '–¢–æ–ª—å–∫–æ –≥–ª–∞–≥–æ–ª—ã'.");
                    disableInputs = true;
                }
                break;
            case 'pronouns':
                // –î–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ –Ω—É–∂–Ω—ã –¥–æ–ø. –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–≤
                break;
            case 'phrases':
            default:
                 if (availableVerbs.length === 0 || availableNouns.length === 0) {
                    showSettingsError("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–ª–∞–≥–æ–ª –∏ –æ–¥–Ω–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ '–§—Ä–∞–∑—ã'.");
                    disableInputs = true;
                }
                break;
        }

         if(disableInputs) {
             promptTextDiv.textContent = "-";
             submitButton.disabled = true;
             speakAnswerButton.disabled = true;
             return; // Stop generation
         }


        try { // Wrap generation in try/catch for better error isolation
            switch (currentMode) {
                case 'nouns':
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ availableNouns —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞ –≤—ã—à–µ
                    const nounData = getRandomElement(availableNouns);
                    const usePluralNoun = Math.random() < 0.5;
                    currentPhrase = {
                        greek: usePluralNoun ? nounData.gr_pl_art : nounData.gr_sg_art,
                        russian: usePluralNoun ? nounData.ru_pl : nounData.ru_sg
                    };
                    phraseGenerated = true;
                    break;

                case 'verbs':
                     // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ availableVerbs —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞ –≤—ã—à–µ
                     const pronounVerb = getRandomElement(pronouns);
                     const verbData = getRandomElement(availableVerbs); // –ì–ª–∞–≥–æ–ª —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω
                     const personNumberVerb = `${pronounVerb.person}${pronounVerb.number}`;
 
                     const verbFormGr = verbData.conjugations ? verbData.conjugations[personNumberVerb] : null;
                     const verbFormRu = verbData.ru_conjugations ? verbData.ru_conjugations[personNumberVerb] : null;
 
                     // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø—Ä—è–∂–µ–Ω–∏–π
                      if (!verbFormGr || !verbFormRu) {
                          console.error(`Missing conjugation for ${verbData.id}, personNumber: ${personNumberVerb}`);
                          showError(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–ø—Ä—è–∂–µ–Ω–∏–µ –¥–ª—è "${verbData.ru_inf}" (${personNumberVerb}).`);
                          submitButton.disabled = true;
                          speakAnswerButton.disabled = true;
                          return; // Stop generation
                      }
 
                     // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—É: –≥—Ä–µ—á–µ—Å–∫–æ–µ —Å–ø—Ä—è–∂–µ–Ω–∏–µ –∏ "—Ä—É—Å—Å–∫–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ + —Ä—É—Å—Å–∫–æ–µ —Å–ø—Ä—è–∂–µ–Ω–∏–µ"
                     currentPhrase = {
                         greek: verbFormGr,
                         russian: `${pronounVerb.ru} ${verbFormRu}` // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–æ–µ —Å–ø—Ä—è–∂–µ–Ω–∏–µ
                     };
                     phraseGenerated = true;
                    break;

                case 'pronouns':
                    const randomPronounP = getRandomElement(pronouns);

                    if (!randomPronounP.gr || !randomPronounP.ru || !randomPronounP.gr_gen || !randomPronounP.ru_dat || !randomPronounP.gr_acc_weak || !randomPronounP.ru_acc) {
                         console.error("Missing pronoun forms for:", randomPronounP);
                         throw new Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ä–º—ã –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π.");
                    }

                    switch (Math.floor(Math.random() * 2.99999)) {
                        case 0:
                            currentPhrase = {
                                greek: randomPronounP.gr,      // ŒµŒ≥œé
                                russian: randomPronounP.ru     // —è
                            };
                            break;
                        case 1:
                            currentPhrase = {
                                greek: randomPronounP.gr_gen,  // ŒºŒøœÖ
                                russian: randomPronounP.ru_dat // –º–Ω–µ
                            };
                            break;
                        case 2:
                            currentPhrase = {
                                greek: randomPronounP.gr_acc_weak, // ŒºŒµ
                                russian: randomPronounP.ru_acc     // –º–µ–Ω—è
                            };
                            break;
                    }
                    phraseGenerated = true;
                    break;

                case 'phrases':
                default:
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ availableVerbs/Nouns —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞ –≤—ã—à–µ
                    const randomVerb = getRandomElement(availableVerbs);
                    const randomPronoun = getRandomElement(pronouns);

                    if (typeof randomVerb.generatePhraseModePhrase === 'function') {
                        if (randomVerb.id === 'einai') {
                             const randomNoun = getRandomElement(availableNouns);
                             currentPhrase = randomVerb.generatePhraseModePhrase(randomPronoun, randomNoun);
                        } else if (randomVerb.id === 'areso') {
                             currentPhrase = randomVerb.generatePhraseModePhrase(randomPronoun, availableNouns);
                        }
                        // Add conditions for other verbs if their generators need different inputs
                    } else {
                        console.error(`Generator function 'generatePhraseModePhrase' not found for verb ${randomVerb.id}`);
                        showError("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ—Ä–∞–∑ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–ª–∞–≥–æ–ª–∞.");
                         submitButton.disabled = true; // Disable input if error
                         speakAnswerButton.disabled = true;
                        return; // Stop generation
                    }

                    if (currentPhrase) {
                         phraseGenerated = true;
                    } else {
                         // Handle cases where generatePhraseModePhrase might return null intentionally
                         // (e.g., areso with no nouns, though primary check handles this)
                         console.error(`Phrase generation returned null for verb ${randomVerb.id}`);
                         showError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—É (–≤–æ–∑–º–æ–∂–Ω–æ, –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö).");
                         submitButton.disabled = true; // Disable input if error
                         speakAnswerButton.disabled = true;
                         return; // Stop generation
                    }
                    break;
            } // end switch

        } catch (error) {
            console.error("Error during phrase generation:", error);
            showError(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—Ä–∞–∑—ã: ${error.message}`);
            promptTextDiv.textContent = "-";
            submitButton.disabled = true;
             speakAnswerButton.disabled = true;
            return; // Stop
        }


        if (phraseGenerated && currentPhrase) {
            updatePromptAndInputMode();
        } else if (!phraseGenerated && !settingsErrorP.textContent && !errorMessageP.textContent) {
             // If no phrase generated AND no other error shown, display a general message
            promptTextDiv.textContent = "-";
            showError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
             submitButton.disabled = true;
             speakAnswerButton.disabled = true;
        }
    }

    function updatePromptAndInputMode() {
         if (!currentPhrase) {
             // console.log("updatePromptAndInputMode called with no currentPhrase");
              promptTextDiv.textContent = "-"; // Ensure prompt is cleared if generation failed
             return;
         }

        const mode = languageModeSelect.value; // "ru-gr" or "gr-ru"
        let promptLang, answerLang, promptText, expectedAnswerText;

        if (mode === 'ru-gr') {
            promptLang = 'ru-RU'; answerLang = 'el-GR';
            promptText = currentPhrase.russian; expectedAnswerText = currentPhrase.greek;
        } else { // gr-ru
            promptLang = 'el-GR'; answerLang = 'ru-RU';
            promptText = currentPhrase.greek; expectedAnswerText = currentPhrase.russian;
        }

        promptTextDiv.textContent = promptText;
        userInput.placeholder = `–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ ${answerLang === 'el-GR' ? '–≥—Ä–µ—á–µ—Å–∫–∏–π' : '—Ä—É—Å—Å–∫–∏–π'}...`;

        // Delay slightly before speaking to avoid cutting off previous sounds
        setTimeout(() => speakText(promptText, promptLang), 100);

        // Setup Speech Recognition for the *answer* language
        recognition = setupSpeechRecognition(answerLang);
        // Ensure button state reflects availability after setup
        speakAnswerButton.disabled = (recognition === null);
        speakAnswerButton.title = (recognition === null) ? "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" : "–°–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç";
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é –æ–±—â—É—é –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (LCS) –¥–ª—è –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤.
     * @param {Array<string>} arr1 –ü–µ—Ä–≤—ã–π –º–∞—Å—Å–∏–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
     * @param {Array<string>} arr2 –í—Ç–æ—Ä–æ–π –º–∞—Å—Å–∏–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞).
     * @returns {Array<string>} –ú–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —ç–ª–µ–º–µ–Ω—Ç—ã LCS.
     */
    function findLCS(arr1, arr2) {
        const m = arr1.length;
        const n = arr2.length;
        // dp[i][j] —Ö—Ä–∞–Ω–∏—Ç –¥–ª–∏–Ω—É LCS –¥–ª—è arr1[0..i-1] –∏ arr2[0..j-1]
        const dp = Array(m + 1).fill(0).map(() => Array(n + 1).fill(0));

        for (let i = 1; i <= m; i++) {
            for (let j = 1; j <= n; j++) {
                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ *–∏—Å—Ö–æ–¥–Ω—ã—Ö* –º–∞—Å—Å–∏–≤–æ–≤ (i-1 –∏ j-1 –∏–Ω–¥–µ–∫—Å—ã)
                if (arr1[i - 1] === arr2[j - 1]) {
                    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, –¥–ª–∏–Ω–∞ LCS —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 1
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    // –ï—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö LCS
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ LCS (–Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª–∏–Ω—ã)
        let index = dp[m][n]; // –î–ª–∏–Ω–∞ LCS
        const lcsSequence = Array(index); // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ LCS

        // –ò–¥–µ–º —Å –∫–æ–Ω—Ü–∞ —Ç–∞–±–ª–∏—Ü—ã dp
        let i = m, j = n;
        while (i > 0 && j > 0) {
            // –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, –æ–Ω–∏ —á–∞—Å—Ç—å LCS
            if (arr1[i - 1] === arr2[j - 1]) {
                lcsSequence[index - 1] = arr1[i - 1]; // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                i--;
                j--;
                index--;
            }
            // –ï—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –¥–≤–∏–≥–∞–µ–º—Å—è –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–æ–ª—å—à–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ dp
            else if (dp[i - 1][j] > dp[i][j - 1]) {
                i--; // –î–≤–∏–≥–∞–µ–º—Å—è –≤–≤–µ—Ä—Ö
            } else {
                j--; // –î–≤–∏–≥–∞–µ–º—Å—è –≤–ª–µ–≤–æ
            }
        }
        return lcsSequence; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ LCS
    }

    function handleSubmit() {
        clearTrainerError();
        const userAnswer = userInput.value; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!currentPhrase) return;

        const langMode = languageModeSelect.value;
        const expectedAnswer = (langMode === 'ru-gr') ? currentPhrase.greek : currentPhrase.russian;

        if (userAnswer.trim() === '') {
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏
            const randomEmoji = getRandomElement(magicEmojis);

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–º–æ–¥–∑–∏ –∫–∞–∫ "–æ—Ç–≤–µ—Ç" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            resultDiv.innerHTML = `–í–∞—à –æ—Ç–≤–µ—Ç: ${randomEmoji}<br>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${expectedAnswer}`;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–∫–∞–∫ –∏ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ)
            submitButton.disabled = true;
            speakAnswerButton.disabled = true;
            // nextButton —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∏–¥–∏–º–∞

            return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ handleSubmit –∑–¥–µ—Å—å
        }

        // 1. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞)
        const normalizedUserAnswer = normalizeText(userAnswer);
        const normalizedExpectedAnswer = normalizeText(expectedAnswer);

        // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å–ª–æ–≤–∞, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –±—ã–ª–æ >1 –ø—Ä–æ–±–µ–ª–∞)
        const userWordsNorm = normalizedUserAnswer.split(' ').filter(w => w.length > 0);
        const correctWordsNorm = normalizedExpectedAnswer.split(' ').filter(w => w.length > 0);

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ —Ç.–¥.
        const originalUserWords = userAnswer.trim().split(/\s+/).filter(w => w.length > 0);

        // 2. –ù–∞—Ö–æ–¥–∏–º LCS –º–µ–∂–¥—É –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ —Å–ª–æ–≤
        const lcsResult = findLCS(userWordsNorm, correctWordsNorm);

        // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ LCS
        let resultHTML = [];
        let lcsIndex = 0; // –ò–Ω–¥–µ–∫—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞ –≤ LCS

        for (let i = 0; i < originalUserWords.length; i++) {
            const currentOriginalWord = originalUserWords[i];
            const currentUserWordNorm = userWordsNorm[i]; // –ë–µ—Ä–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–∂–∏–¥–∞–µ–º—ã–º —Å–ª–æ–≤–æ–º –∏–∑ LCS
            if (lcsIndex < lcsResult.length && currentUserWordNorm === lcsResult[lcsIndex]) {
                // –°–ª–æ–≤–æ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é LCS - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
                resultHTML.push(`<span class="correct-char">${currentOriginalWord}</span>`);
                lcsIndex++; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É –≤ LCS
            } else {
                // –°–ª–æ–≤–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é LCS (–ª–∏—à–Ω–µ–µ –∏–ª–∏ –Ω–µ –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ) - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
                resultHTML.push(`<span class="incorrect-char">${currentOriginalWord}</span>`);
            }
        }

        // 4. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        resultDiv.innerHTML = `–í–∞—à –æ—Ç–≤–µ—Ç: ${resultHTML.join(' ')}<br>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${expectedAnswer}`;

        // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        // nextButton –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º–æ–π (—Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É)
        submitButton.disabled = true; // –û—Ç–∫–ª—é—á–∞–µ–º "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        speakAnswerButton.disabled = true; // –û—Ç–∫–ª—é—á–∞–µ–º "–ì–æ–≤–æ—Ä–∏—Ç—å" –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    }

    function handleSpeechRequest() {
        clearTrainerError();
        if (recognition) {
            try {
                recognition.start();
            } catch (e) {
                 console.error("Error starting speech recognition:", e);
                 if (e.name !== 'InvalidStateError') { // Ignore if already started
                    showError('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏.');
                 }
            }
        } else {
            showError('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.');
        }
    }

    // --- Error Display ---
     function showSettingsError(message) {
         settingsErrorP.textContent = message;
         settingsErrorP.classList.remove('hidden');
     }
      function clearSettingsError() {
         settingsErrorP.textContent = '';
         settingsErrorP.classList.add('hidden');
     }
     function showError(message) { // For trainer area errors
         errorMessageP.textContent = message;
         errorMessageP.classList.remove('hidden');
     }
     function clearTrainerError() { // For trainer area errors
         errorMessageP.textContent = '';
         errorMessageP.classList.add('hidden');
     }

    // --- Initialization ---
    function initializeApp() {
        populateVoiceList(); // Ensure voices are loaded early

        // --- Load Settings from Cookies ---
        const savedMode = getCookie('trainingMode') || 'phrases';
        const savedVerbsStr = getCookie('selectedVerbs');
        const savedNounsStr = getCookie('selectedNouns');
        const savedLangMode = getCookie('languageMode') || 'ru-gr';

        const savedVerbIds = savedVerbsStr ? savedVerbsStr.split(',') : verbs.map(v => v.id); // Default to all if no cookie
        const savedNounIds = savedNounsStr ? savedNounsStr.split(',') : nouns.map(n => n.id); // Default to all if no cookie

        // --- Populate Settings UI ---
        // Verbs
        verbSelectionList.innerHTML = ''; // Clear previous (if any)
        verbs.forEach(verb => {
            const div = document.createElement('div');
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.id = `verb-${verb.id}`;
            checkbox.value = verb.id;
            checkbox.checked = savedVerbIds.includes(verb.id); // Set from loaded/default
            checkbox.addEventListener('change', handleSettingsChange); // Add listener
            const label = document.createElement('label');
            label.htmlFor = `verb-${verb.id}`;
            label.textContent = `${verb.gr_inf} (${verb.ru_inf})`;
            div.appendChild(checkbox);
            div.appendChild(label);
            verbSelectionList.appendChild(div);
        });

        // Nouns
        nounSelectionList.innerHTML = ''; // Clear previous
        nouns.forEach(noun => {
             const div = document.createElement('div');
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.id = `noun-${noun.id}`;
            checkbox.value = noun.id;
            checkbox.checked = savedNounIds.includes(noun.id); // Set from loaded/default
            checkbox.addEventListener('change', handleSettingsChange); // Add listener
            const label = document.createElement('label');
            label.htmlFor = `noun-${noun.id}`;
            label.textContent = `${noun.gr_sg_art} / ${noun.gr_pl_art} (${noun.ru_sg} / ${noun.ru_pl})`;
             div.appendChild(checkbox);
            div.appendChild(label);
            nounSelectionList.appendChild(div);
        });

         trainingModeSelect.value = savedMode;
         trainingModeSelect.addEventListener('change', handleSettingsChange);

         // Language Direction Select
         languageModeSelect.value = savedLangMode;
         languageModeSelect.addEventListener('change', handleSettingsChange); // Add listener

        // --- Initial State Sync & First Phrase ---
        // Call handleSettingsChange once to ensure state variables (selectedVerbIds, etc.) are set correctly
        // and the first phrase is generated based on loaded settings.
        handleSettingsChange();

        // --- Add Other Event Listeners ---
        speakPromptButton.addEventListener('click', () => {
            if (currentPhrase) {
                const langMode = languageModeSelect.value;
                const textToSpeak = (langMode === 'ru-gr') ? currentPhrase.russian : currentPhrase.greek;
                const lang = (langMode === 'ru-gr') ? 'ru-RU' : 'el-GR';
                speakText(textToSpeak, lang);
            }
        });
        submitButton.addEventListener('click', handleSubmit);
        userInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') handleSubmit(); });
        speakAnswerButton.addEventListener('click', handleSpeechRequest);
        nextButton.addEventListener('click', generateNewPhrase);

         // Initial check for Speech API support and update buttons
        if (typeof synth === 'undefined') { speakPromptButton.disabled = true; speakPromptButton.title = "–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"; }
        if (!window.SpeechRecognition && !window.webkitSpeechRecognition) { speakAnswerButton.disabled = true; speakAnswerButton.title = "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"; }
    }

    // --- Start the application ---
    initializeApp();

}); // End DOMContentLoaded